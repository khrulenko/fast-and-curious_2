{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["doctorTime","require","App","createSсhedule","timeToMinutes","time","timeParts","split","minutesToTime","minutes","mins","hours","length","sсhedule","visitTime","start","end","shouldAddInitial","push","s","appointments","appointmentStart","appointmentEnd","duration","splice","console","log","className","src","logo","alt","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WAAe,G,KAAA,IAA0B,kC,cCGnCA,EAAaC,EAAQ,IA6EZC,MA3Ef,WAEE,SAASC,EAAeH,GAEtB,SAASI,EAAcC,GACrB,IAAMC,EAAYD,EAAKE,MAAM,KAE7B,OAAuB,GAAfD,EAAU,KAAYA,EAAU,GAG1C,SAASE,EAAcC,GACrB,IAAIC,EAAOD,EAAU,GAAK,GACtBE,GAASF,EAAUC,GAAQ,GAAK,GAUpC,OARqB,IAAjBC,EAAMC,SACRD,EAAQ,IAAMA,GAGI,IAAhBD,EAAKE,SACPF,EAAO,IAAMA,GAGT,GAAN,OAAUC,EAAV,YAAmBD,GAOrB,IAJA,IAAMG,EAAW,GAEbC,EAAYV,EAAcJ,EAAWe,OAElCD,EAHsB,IAGcV,EAAcJ,EAAWgB,MAAM,CACxE,IAAIC,GAAmB,EACvBJ,EAASK,KAAKV,EAAcM,IAE1B,IAAK,IAAIK,EAAI,EAAGA,EAAInB,EAAWoB,aAAaR,OAAQO,IAAK,CACvD,IAAME,EAAmBjB,EAAcJ,EAAWoB,aAAaD,GAAGJ,OAE5DO,EAAiBlB,EACrBJ,EAAWoB,aAAaD,GAAGJ,OACzBf,EAAWoB,aAAaD,GAAGI,SAE3BF,GAAoBP,GACnBO,EAAmBP,EAfD,KAiBrBA,EAAYQ,EACZT,EAASW,OAAOX,EAASD,OAAS,EAAG,GACrCK,GAAmB,GAInBA,IACFH,GAxBuB,IA4B7B,OAAOD,EAKT,OAFAY,QAAQC,IAAI,6BAA8BvB,EAAeH,IAGvD,qBAAK2B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oDACA,iFAEA,8BACG3B,EAAeH,GAAY+B,KAAK,eC5D5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.984a1503.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nconst doctorTime = require('./doctorSсheduleData');\n\nfunction App() {\n\n  function createSсhedule(doctorTime) {\n\n    function timeToMinutes(time) {\n      const timeParts = time.split(':');\n\n      return (timeParts[0] * 60) + +timeParts[1];\n    };\n\n    function minutesToTime(minutes) {\n      let mins = minutes % 60 + '';\n      let hours = (minutes - mins) / 60 + '';\n\n      if (hours.length === 1) {\n        hours = '0' + hours;\n      };\n\n      if (mins.length === 1) {\n        mins = '0' + mins;\n      };\n\n      return `${hours}:${mins}`;\n    };\n\n    const sсhedule = [];\n    const initialVisitDuration = 45;\n    let visitTime = timeToMinutes(doctorTime.start);\n\n    while (visitTime + initialVisitDuration <= timeToMinutes(doctorTime.end)) {\n      let shouldAddInitial = true;\n      sсhedule.push(minutesToTime(visitTime));\n\n        for (let s = 0; s < doctorTime.appointments.length; s++) {\n          const appointmentStart = timeToMinutes(doctorTime.appointments[s].start);\n\n          const appointmentEnd = timeToMinutes(\n            doctorTime.appointments[s].start\n          ) + doctorTime.appointments[s].duration;\n\n          if (appointmentStart >= visitTime\n            && appointmentStart < visitTime + initialVisitDuration\n          ) {\n            visitTime = appointmentEnd;\n            sсhedule.splice(sсhedule.length - 1, 1);\n            shouldAddInitial = false;\n          }\n        };\n\n        if (shouldAddInitial) {\n          visitTime += initialVisitDuration;\n        };\n    };\n\n    return sсhedule;\n  }\n\n  console.log('---The result of the task:', createSсhedule(doctorTime));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Part 2 of the task</h1>\n        <h2>The result of the createSсhedule function:</h2>\n\n        <div>\n          {createSсhedule(doctorTime).join(' | ')}\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}